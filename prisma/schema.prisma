datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User model representing customers and shopkeepers
model users {
  id            String       @id @default(uuid()) @db.Uuid
  role          String       @default("customer")
  name          String?      // Optional name for tracking
  email         String       @unique
  phone_number  String?      // Optional phone number for cashback
  password_hash String
  created_at    DateTime     @default(now())
  coupons       coupons[]    @relation("UserCoupons")
  share_links   share_links[] @relation("UserShareLinks")
  clicks        clicks[]     @relation("UserClicks")
  redemptions_as_redeemer redemptions[] @relation("Redeemer")
  redemptions_as_shopkeeper redemptions[] @relation("Shopkeeper")

  @@map("users")
}

// Shop model for businesses issuing coupons
model shops {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  owner_id  String   @db.Uuid @unique
  created_at DateTime @default(now())
  coupons   coupons[] @relation("ShopCoupons")

  @@map("shops")
}

// Coupon model for discount offers
model coupons {
  id         String   @id @default(uuid()) @db.Uuid
  user_id    String   @db.Uuid
  shop_id    String   @db.Uuid
  status     String   @default("pending")
  threshold  Int      @default(3)
  expires_at DateTime
  created_at DateTime @default(now())
  share_links share_links[] @relation("CouponShareLinks")
  redemptions redemptions[] @relation("CouponRedemptions")
  users      users    @relation("UserCoupons", fields: [user_id], references: [id], onDelete: Cascade)
  shops      shops    @relation("ShopCoupons", fields: [shop_id], references: [id], onDelete: Cascade)

  @@map("coupons")
}

// Share link model for distributing coupons
model share_links {
  id          String   @id @default(uuid()) @db.Uuid
  coupon_id   String   @db.Uuid
  link_url    String   @unique
  user_id     String?  @db.Uuid
  generated_at DateTime @default(now())
  clicks      clicks[] @relation("ShareLinkClicks")
  coupons     coupons  @relation("CouponShareLinks", fields: [coupon_id], references: [id], onDelete: Cascade)
  users       users?   @relation("UserShareLinks", fields: [user_id], references: [id], onDelete: SetNull)

  @@map("share_links")
}

// Click model for tracking coupon interactions
model clicks {
  id            String   @id @default(uuid()) @db.Uuid
  share_link_id String   @db.Uuid
  clicker_id    String   @db.Uuid
  clicker_ip    String?  @db.VarChar(45)
  redeemed      Boolean  @default(false)
  clicked_at    DateTime @default(now())
  share_links   share_links @relation("ShareLinkClicks", fields: [share_link_id], references: [id], onDelete: Cascade)
  users         users?   @relation("UserClicks", fields: [clicker_id], references: [id], onDelete: SetNull)

  @@map("clicks")
  @@index([clicker_ip])
}

// Redemption model for coupon usage
model redemptions {
  id            String   @id @default(uuid()) @db.Uuid
  coupon_id     String   @db.Uuid
  redeemer_id   String   @db.Uuid
  shopkeeper_id String   @db.Uuid
  confirmed_at  DateTime @default(now())
  coupons       coupons  @relation("CouponRedemptions", fields: [coupon_id], references: [id], onDelete: Cascade)
  users_redeemer users   @relation("Redeemer", fields: [redeemer_id], references: [id], onDelete: Cascade)
  users_shopkeeper users @relation("Shopkeeper", fields: [shopkeeper_id], references: [id], onDelete: Cascade, map: "RedemptionsShopkeeperFkey")

  @@map("redemptions")
}